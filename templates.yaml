# Lynx Smart Contract Vulnerability Templates
# Hunt vulnerabilities with feline precision 🐾

templates:
  - id: reentrancy-call
    info:
      name: "Potential Reentrancy Attack"
      author: "Lynx Security Team"
      severity: high
      description: "External call before state change may allow reentrancy attacks"
      recommendation: "Use checks-effects-interactions pattern or reentrancy guards"
      references:
        - "https://swcregistry.io/docs/SWC-107"
      tags:
        - reentrancy
        - external-calls
    detection:
      patterns:
        - '.call{'
        - '.call('
        - '.send('
        - '.transfer('
      negative_patterns:
        - 'nonReentrant'
        - 'ReentrancyGuard'
        - 'safeWithdraw'

  - id: tx-origin-auth
    info:
      name: "Dangerous use of tx.origin"
      author: "Lynx Security Team"
      severity: high
      description: "Using tx.origin for authentication is vulnerable to phishing attacks"
      recommendation: "Use msg.sender instead of tx.origin for authentication checks"
      references:
        - "https://swcregistry.io/docs/SWC-115"
      tags:
        - authentication
        - phishing
        - tx-origin
    detection:
      patterns:
        - 'tx.origin'
      negative_patterns:
        - '// tx.origin'
        - 'explanation'

  - id: weak-randomness
    info:
      name: "Weak Source of Randomness"
      author: "Lynx Security Team"
      severity: medium
      description: "Using block properties for randomness is predictable"
      recommendation: "Use Chainlink VRF or commit-reveal schemes"
      references:
        - "https://swcregistry.io/docs/SWC-120"
      tags:
        - randomness
        - block-properties
    detection:
      patterns:
        - 'block.timestamp'
        - 'block.number'
        - 'block.difficulty'
        - 'block.blockhash'
      negative_patterns:
        - 'VRF'
        - 'Chainlink'

  - id: unprotected-selfdestruct
    info:
      name: "Unprotected Selfdestruct"
      author: "Lynx Security Team"
      severity: critical
      description: "Selfdestruct without proper access control"
      recommendation: "Add onlyOwner modifier to selfdestruct functions"
      references:
        - "https://swcregistry.io/docs/SWC-106"
      tags:
        - selfdestruct
        - access-control
    detection:
      patterns:
        - 'selfdestruct('
        - 'suicide('
      negative_patterns:
        - 'onlyOwner'
        - 'require(msg.sender == owner'

  - id: integer-operations
    info:
      name: "Integer Operations"
      author: "Lynx Security Team"
      severity: medium
      description: "Arithmetic operations that could overflow in older Solidity"
      recommendation: "Use SafeMath or upgrade to Solidity 0.8+"
      references:
        - "https://swcregistry.io/docs/SWC-101"
      tags:
        - arithmetic
        - overflow
    detection:
      patterns:
        - '+='
        - '-='
        - '*='
        - '/='
      negative_patterns:
        - 'SafeMath'
        - 'pragma solidity ^0.8'
        - 'pragma solidity >=0.8'

  - id: unchecked-external-call
    info:
      name: "Unchecked External Call"
      author: "Lynx Security Team"
      severity: medium
      description: "External call return value not checked"
      recommendation: "Always check return values of external calls"
      references:
        - "https://swcregistry.io/docs/SWC-104"
      tags:
        - unchecked-calls
        - external-calls
    detection:
      patterns:
        - '.call('
        - '.delegatecall('
        - '.staticcall('
      negative_patterns:
        - 'bool success'
        - 'require('
        - '(bool'
        - 'if ('

  - id: dos-gas-limit
    info:
      name: "Potential DoS via Gas Limit"
      author: "Lynx Security Team"
      severity: medium
      description: "Unbounded loops can cause DoS attacks"
      recommendation: "Use pagination or limit array sizes"
      references:
        - "https://swcregistry.io/docs/SWC-128"
      tags:
        - dos
        - gas-limit
        - loops
    detection:
      patterns:
        - 'for (uint256 i = 0; i < users.length'
        - 'for (uint i = 0; i < holders.length'
        - '.length; i++)'
      negative_patterns:
        - 'require('
        - 'MAX_'
        - 'pagination'

  - id: timestamp-dependence
    info:
      name: "Timestamp Dependence"
      author: "Lynx Security Team"
      severity: medium
      description: "Using block.timestamp for critical logic"
      recommendation: "Avoid timestamp dependence or use tolerance"
      references:
        - "https://swcregistry.io/docs/SWC-116"
      tags:
        - timestamp
        - manipulation
    detection:
      patterns:
        - 'block.timestamp >'
        - 'block.timestamp <'
        - 'block.timestamp =='
        - 'block.timestamp %'
      negative_patterns:
        - 'GRACE_PERIOD'
        - 'tolerance'

  - id: missing-zero-check
    info:
      name: "Missing Zero Address Check"
      author: "Lynx Security Team"
      severity: low
      description: "Missing validation for zero address"
      recommendation: "Add require(address != address(0)) checks"
      references:
        - "https://consensys.github.io/smart-contract-best-practices/"
      tags:
        - validation
        - zero-address
    detection:
      patterns:
        - 'function transferOwnership(address'
        - 'owner = newOwner'
      negative_patterns:
        - 'require('
        - 'address(0)'
        - 'validAddress'
