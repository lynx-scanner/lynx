# Lynx Smart Contract Vulnerability Templates
# Hunt vulnerabilities with feline precision üêæ

templates:
  - id: reentrancy-call
    info:
      name: "Potential Reentrancy Attack"
      author: "Lynx Security Team"
      severity: high
      description: "External call before state change may allow reentrancy attacks"
      recommendation: "Use checks-effects-interactions pattern or reentrancy guards"
      references:
        - "https://swcregistry.io/docs/SWC-107"
      tags:
        - reentrancy
        - external-calls
    detection:
      patterns:
        - '.call{'
        - '.call('
        - '.send('
        - '.transfer('
      negative_patterns:
        - 'nonReentrant'
        - 'ReentrancyGuard'

  - id: tx-origin-auth
    info:
      name: "Dangerous use of tx.origin"
      author: "Lynx Security Team"
      severity: high
      description: "Using tx.origin for authentication is vulnerable to phishing attacks"
      recommendation: "Use msg.sender instead of tx.origin for authentication checks"
      references:
        - "https://swcregistry.io/docs/SWC-115"
      tags:
        - authentication
        - phishing
        - tx-origin
    detection:
      patterns:
        - 'tx.origin'
      negative_patterns:
        - '// tx.origin'

  - id: weak-randomness
    info:
      name: "Weak Source of Randomness"
      author: "Lynx Security Team"
      severity: medium
      description: "Using block properties for randomness is predictable"
      recommendation: "Use Chainlink VRF or commit-reveal schemes"
      references:
        - "https://swcregistry.io/docs/SWC-120"
      tags:
        - randomness
        - block-properties
    detection:
      patterns:
        - 'block.timestamp'
        - 'block.number'
        - 'block.difficulty'
      negative_patterns:
        - 'VRF'

  - id: unprotected-selfdestruct
    info:
      name: "Unprotected Selfdestruct"
      author: "Lynx Security Team"
      severity: critical
      description: "Selfdestruct without proper access control"
      recommendation: "Add onlyOwner modifier to selfdestruct functions"
      references:
        - "https://swcregistry.io/docs/SWC-106"
      tags:
        - selfdestruct
        - access-control
    detection:
      patterns:
        - 'selfdestruct('
      negative_patterns:
        - 'onlyOwner'

  - id: integer-operations
    info:
      name: "Integer Operations"
      author: "Lynx Security Team"
      severity: medium
      description: "Arithmetic operations that could overflow in older Solidity"
      recommendation: "Use SafeMath or upgrade to Solidity 0.8+"
      references:
        - "https://swcregistry.io/docs/SWC-101"
      tags:
        - arithmetic
        - overflow
    detection:
      patterns:
        - '+='
        - '-='
        - '*='
      negative_patterns:
        - 'SafeMath'
        - 'pragma solidity ^0.8'
